""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""Special Error Fix"""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fix the gui menu encoding error in #Windows x86
" But this error still occurs under gVim-Easy
set langmenu=en.US.UTF-8
language en

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""KEY MAPPING"""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ------basic key mapping--------------------------------- "
inoremap <Up> <Nop>
nnoremap <Up> <Nop>

inoremap <Down> <Nop>
nnoremap <Down> <Nop>

inoremap <Right> <Nop>
nnoremap <Right> <Nop>

inoremap <Left> <Nop>
nnoremap <Left> <Nop>

inoremap jk <Esc>

nnoremap H ^
nnoremap L $

"inoremap ( ()<Left>
"inoremap { {}<Left><CR><Esc>O<Tab>

" For canceling highlight-status after using '/' to search
nnoremap <CR> :noh<CR><CR>

" ------leader key mapping-------------------------------- "
" set <Leader> to <Space>
let mapleader = ' '

" set hotkeys to edit and source $MYVIMRC
nnoremap <Leader>ev :vsp $MYVIMRC<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>

" ------C++ compilation settings-------------------------- "
" under WINDOWS
if has('win32')
    set makeprg=mingw32-make
endif

if (has('gui_running') && has('win32')) || has('nvim')
    nnoremap <Leader>c :! g++ "%" -g -o "%<.exe"<CR>
    nnoremap <Leader>r :! %<.exe<CR>
    nnoremap <Leader>cr :! g++ "%" -g -o "%<.exe" && %<.exe<CR>
    nnoremap <Leader>db :!start gdb "%<.exe"<CR>
    " clean all *.o *.exe files
    "nnoremap <Leader>cl :!start _clean.bat<CR>
    nnoremap <Leader>cl :! del *.o *.exe<CR>
    " Makefile
	nnoremap <Leader>mk :! mingw32-make<CR>
endif
" under LINUX

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""PLUGINS List""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" I am using the vim-plug for plugin-management RIGHT NOW.
"
" Plugins will be downloaded under the specified directory.
call plug#begin('$HOME/vimfiles/plugged')
"
" Declare the list of plugins.
"
" ------Appearance---------------------------------------- "
Plug 'altercation/vim-colors-solarized'
Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'
Plug 'cormacrelf/vim-colors-github'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"
" ------Functions----------------------------------------- "
Plug 'jiangmiao/auto-pairs'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tpope/vim-fugitive'
Plug 'sheerun/vim-polyglot'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'OmniSharp/omnisharp-vim'
"
" List ends here. Plugins become visible to Vim after this call.
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""PLUGINS SETTINGS""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ------------------------------ "
" ------Solarized--------------- "
" ------------------------------ "
" GUI mode light color background, terminal mode deep color background
syntax enable
if has('gui_running')
    set background=dark
else
    set background=dark
endif
" theme is set to solarized
"colorscheme solarized

" other settings
"let g:solarized_termcolors=256
"let g:solarized_termtrans = 1 " use termal background
"let g:solarized_visibility = "high" " user :set list display the hight level of special characters

" ------------------------------ "
" ------Gruvbox----------------- "
" ------------------------------ "
if has('nvim')
    autocmd vimenter * ++nested colorscheme gruvbox
endif
autocmd vimenter * ++nested colorscheme gruvbox
let g:gruvbox_italic = 0

" ------------------------------ "
" ------onedark.vim------------- "
" ------------------------------ "
if !has('nvim')
    "autocmd vimenter * ++nested colorscheme onedark
    "let g:onedark_terminal_italics = 1
endif

" ------------------------------ "
" ------vim-colors-github------- "
" ------------------------------ "
"colorscheme github
"set background=light

" if you use airline / lightline
"let g:airline_theme = 'github'
"let g:lightline = { 'colorscheme': 'github' }

" ------------------------------ "
" ------Airline----------------- "
" ------------------------------ "
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline_powerline_fonts = 1

" ------------------------------ "
" ------Coc.nvim---------------- "
" ------------------------------ "
" ------Extensions management----------------------------- "
let g:coc_global_extensions = ['coc-lists', 'coc-json', 'coc-clangd', 'coc-pyright']
" ------Completion Setting(like key mapping)-------------- "
" use <cr> to confirm completion
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" ------Key Mapping--------------------------------------- "
" coc.nvim mapping settings
nnoremap <Leader>l :CocList --normal<CR>
nnoremap <Leader>rl :CocListResume<CR>

" ------------------------------ "
" ------vim-polyglot------------ "
" ------------------------------ "
" nothing need to disable
"let g:polyglot_disalbed = []

" ------------------------------ "
" ------netrw settings---------- "
" ------------------------------ "
let g:netrw_winsize = 25

" ------------------------------ "
" ------NERDTree settings------- "
" ------------------------------ "
" hotkey for toggle NERDTree
nnoremap <Leader><Leader> :NERDTreeToggle<CR>
" don't show hidden files
let g:NERDTreeShowHidden=0

" ------------------------------ "
" -NERDTree-git-plugin settings- "
" ------------------------------ "
" custom symbols
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
" show ignored status
"let g:NERDTreeGitStatusShowIgnored = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""Frequently Used Settings""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ------Font Settings------------------------------------- "
" basic settings
if !has('nvim')
    "set guifont=Source_Code_Pro_for_Powerline:h12:cANSI
    set guifont=Sarasa\ Mono\ CL:h12
    set guifontwide=Sarasa_Mono_Slab_CL:h12
endif
if has('nvim')
    set guifont=Sarasa\ Mono\ CL:h12
    set guifontwide=Sarasa\ Mono\ Slab\ CL:h12
endif
set backspace=2

" gui options, defualt is 'gmrLtT'
set guioptions=grLtc
"set guioptions=grLtce

" correctly match 'json' file comments
"autocmd FileType json syntax match Comment +\/\/.\+$+

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""BASIC SETTINGS""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cursor shape settings
" In KONSOLE, 'mouseshape' option can not work
" So, following is the solutions:
" (It works, but the changing speed is a little **slow**)
if &term =~ "^xterm"
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[3 q"
    let &t_EI = "\<Esc>[2 q"
endif

" open or close line number
set number

" show relative line number
set relativenumber

" set text width in one line
set textwidth=60

" set no line wrap
set nowrap
"set wrap
"set linebreak
"set wrapmargin=2

" set vertical scroll margin of top/bottom
set scrolloff=10

" set horizontal scroll margin of left/right
set sidescrolloff=15

" show status bar
set laststatus=2

" show current cursor position
set ruler

" highlight cursor line
set cursorline

" highlight cursor column
"set cursorcolumn

" set utf-8 encoding
set encoding=utf-8

" set no compatible with Vi
set nocompatible

" open syntax highlight
syntax on

" show current mode
set showmode

" show current inputted instructions in command mode
set showcmd

" support using mouse
set mouse=a

" enable 256 colors
set t_Co=256

" enable file type check to load respond indent rules
filetype indent on

" auto indent after <ENTER>
set autoindent

" set how many <space> after one tab
set tabstop=4

" set '>>', '<<' and '==' correspond <space> width
set shiftwidth=4

" auto transfer from <tab> to <space>
" And one <tab> to how many <space>
set expandtab
set softtabstop=0

" auto highlight other punctuation marks when encountering brace and bracket
set showmatch

" highlight match result of search
set hlsearch

" increase search in input
set incsearch

" ignore upper and lower case in search
set ignorecase
"set smartcase

" open English spell check
"set spell spelllang=en_us

" save undo history
set undofile

" set path of backup/swap/undo files
if has('nvim')
    " windows & linux for neovim
    let $XDG_DATA_HOME=stdpath("data")
    set undodir=$XDG_DATA_HOME/nvim/undo//
    set backupdir=.,$XDG_DATA_HOME/nvim/backup//
    set directory=$XDG_DATA_HOME/nvim/swap//
elseif has('win32')
    " windows for vim
    set backupdir=~/vimfiles/.backup//
    set directory=~/vimfiles/.swp//
    set undodir=~/vimfiles/.undo//
else
    " linux for vim
    set backupdir=~/.vim/.backup//
    set directory=~/.vim/.swp//
    set undodir=~/.vim/.undo//
endif

" auto switch work directory
set autochdir

" set no error bells
set noerrorbells

" set visual bell instead of sound
set visualbell

" set how many history operations needed to be remembered
set history=1000

" open file monitor
set autoread

" set <tab> auto complete of command in command mode
set wildmenu
set wildmode=longest:list,full

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""FILE TYPE Ref"""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ------makefile settings--------------------------------- "
" don't expand <tab> with <space> in makefile
autocmd FileType make set noexpandtab
" ------json file settings-------------------------------- "
" let '//' match the comment's style like cpp
autocmd FileType json syntax match Comment +\/\/.\+$+
